package org.usgs.manifold.packet.data;


import java.util.HashMap;
import java.util.Map;
import org.usgs.manifold.utilities.DatabaseHelper;
import java.util.concurrent.BlockingQueue;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.usgs.manifold.ConfigurationPacket;
import org.usgs.manifold.Initialize;

import org.usgs.manifold.database.DatabaseInsertStatement;
import org.usgs.manifold.utilities.Time;

/**
 *
 */
public class SendRainGadge {

    private static Logger log =
            LoggerFactory.getLogger(SendOneSecondScan.class);
    private static ConfigurationPacket config = Initialize.getPacketConfig();

    
    public static final String tableCreation = "(j2ksec DOUBLE PRIMARY KEY, "
            + "rainTips INTEGER, tid INTEGER, rid INTEGER)";

    /** The body of an SQL insert statement for One Second Scan data. */
    private static final String insertStatement =
    //        "(t,rainTips) VALUES (?,?);";
             "(j2ksec,rainTips,tid,rid) VALUES (?,?,?,?);";
    /** The database table definition for One Second Scan data. */
    private static final Map<String, String> tableDefinition =
            new HashMap<String, String>();
    static {
        //tableDefinition.put("t",    "double");
        tableDefinition.put("j2ksec",    "double");
        tableDefinition.put("rainTips",  "int");
        //added for valve 3.4
        tableDefinition.put("tid",  "int");
        //added for valve 3.4
        tableDefinition.put("rid",  "int");
    }

    /** Holds SQL statements. */
    private static BlockingQueue<DatabaseInsertStatement> statements = null;


    // Prevent instantiation
    private SendRainGadge() {
    }

    /**
     * Sets the statement queue that is used by
     * {@link #sendToQueue(DataOneSecondScan) sendToQueue}.
     *
     * @param statements a queue to hold {@link DatabaseInsertStatement}
     *        objects generated by
     *        {@link #sendToQueue(DataOneSecondScan) sendToQueue}.
     */
    public static synchronized void setStatementQueue(
            BlockingQueue<DatabaseInsertStatement> statements) {

        SendRainGadge.statements = statements;
    }

    /**
     * Generates a {@link DatabaseInsertStatement} object from the data in the
     * packet and offers it it to the queue specified by
     * {@link #setStatementQueue(BlockingQueue) setStatementQueue}.
     *
     * <p>
     * The database indicated in {@link OneSecondScan} is the database used in
     * the creation of the {@link DatabaseInsertStatement} object.
     *
     * @param scanData the packet being sent out.
     * @throws IllegalStateException if the statement queue has not been set.
     */
    public static synchronized void sendToQueue(DataRainGadge rainData) {

        if (statements == null) {
            throw new IllegalStateException("One Rain Gadge statement queue "
                    + "has not been set.");
        }

        String table = DatabaseHelper.getTableName(rainData);

        //TODO: Remove
        System.out.println("Table: " + table);

        // Define the parameters to insert.
        double time = Time.toJ2KSeconds(rainData.getTime());
        int[] data = rainData.getData();


        //DatabaseInsertStatement dbStatement = new DatabaseInsertStatement(
        //        table, config.RAIN_DATABASE, tableDefinition, tableCreation,
        //       insertStatement, time, data[0]);
        
        //changed for valve 3.4
        DatabaseInsertStatement dbStatement = new DatabaseInsertStatement(
                table, config.RAIN_DATABASE, tableDefinition, tableCreation,
                insertStatement, time, data[0], 1, 1);

        if (!statements.offer(dbStatement)) {
            log.warn("Can not insert One Second Scan data into database due to "
                    + "a full queue.\nData will be discarded.");
        }
    }

}
