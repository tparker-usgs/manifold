package org.usgs.manifold.packet.data;

import java.util.HashMap;
import java.util.Map;
import org.usgs.manifold.utilities.DatabaseHelper;
import java.util.concurrent.BlockingQueue;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.usgs.manifold.ConfigurationPacket;
import org.usgs.manifold.Initialize;

import org.usgs.manifold.database.DatabaseInsertStatement;
import org.usgs.manifold.utilities.Time;

/**
 * Static methods to help with sending One Second Scan data to where it needs to
 * go.
 *
 */
public class SendOneSecondScan {

    private static Logger log =
            LoggerFactory.getLogger(SendOneSecondScan.class);
    private static ConfigurationPacket config = Initialize.getPacketConfig();

    /** The body of an SQL create table statement for One Second Scan data. */
    //public static final String tableCreation = "(t DOUBLE PRIMARY KEY, "
    //        + "CH0 INTEGER, CH1 INTEGER, CH2 INTEGER, CH3 INTEGER, "
    //        + "CH4 INTEGER, CH5 INTEGER, CH6 INTEGER, CH7 INTEGER)";

    public static final String tableCreation = "(j2ksec DOUBLE PRIMARY KEY, "
            + "CH0 INTEGER, CH1 INTEGER, CH2 INTEGER, CH3 INTEGER, "
            + "CH4 INTEGER, CH5 INTEGER, CH6 INTEGER, CH7 INTEGER, tid INTEGER, rid INTEGER)";

    /** The body of an SQL insert statement for One Second Scan data. */
    private static final String insertStatement = 
    //        "(t,CH0,CH1,CH2,CH3,CH4,CH5,CH6,CH7) VALUES (?,?,?,?,?,?,?,?,?);";
             "(j2ksec,CH0,CH1,CH2,CH3,CH4,CH5,CH6,CH7,tid,rid) VALUES (?,?,?,?,?,?,?,?,?,?,?);";
    /** The database table definition for One Second Scan data. */
    private static final Map<String, String> tableDefinition =
            new HashMap<String, String>();
    static {
        //tableDefinition.put("t",    "double");
        tableDefinition.put("j2ksec",    "double");
        tableDefinition.put("CH0",  "int");
        tableDefinition.put("CH1",  "int");
        tableDefinition.put("CH2",  "int");
        tableDefinition.put("CH3",  "int");
        tableDefinition.put("CH4",  "int");
        tableDefinition.put("CH5",  "int");
        tableDefinition.put("CH6",  "int");
        tableDefinition.put("CH7",  "int");
        //added for valve 3.4
        tableDefinition.put("tid",  "int");
        //added for valve 3.4
        tableDefinition.put("rid",  "int");
    }

    /** Holds SQL statements. */
    private static BlockingQueue<DatabaseInsertStatement> statements = null;


    // Prevent instantiation
    private SendOneSecondScan() {
    }

    /**
     * Sets the statement queue that is used by
     * {@link #sendToQueue(DataOneSecondScan) sendToQueue}.
     *
     * @param statements a queue to hold {@link DatabaseInsertStatement}
     *        objects generated by
     *        {@link #sendToQueue(DataOneSecondScan) sendToQueue}.
     */
    public static synchronized void setStatementQueue(
            BlockingQueue<DatabaseInsertStatement> statements) {

        SendOneSecondScan.statements = statements;
    }

    /**
     * Generates a {@link DatabaseInsertStatement} object from the data in the
     * packet and offers it it to the queue specified by
     * {@link #setStatementQueue(BlockingQueue) setStatementQueue}.
     *
     * <p>
     * The database indicated in {@link OneSecondScan} is the database used in
     * the creation of the {@link DatabaseInsertStatement} object.
     *
     * @param scanData the packet being sent out.
     * @throws IllegalStateException if the statement queue has not been set.
     */
    public static synchronized void sendToQueue(DataOneSecondScan scanData) {

        if (statements == null) {
            throw new IllegalStateException("One Second Scan statement queue "
                    + "has not been set.");
        }

        String table = DatabaseHelper.getTableName(scanData);

        //TODO: Remove
        System.out.println("Table: " + table);

        // Define the parameters to insert.
        double time = Time.toJ2KSeconds(scanData.getTime());
        int[] data = scanData.getData();

        
        //DatabaseInsertStatement dbStatement = new DatabaseInsertStatement(
        //        table, config.SCAN_DATABASE, tableDefinition, tableCreation,
        //       insertStatement, time, data[0], data[1], data[2], data[3],
        //        data[4], data[5], data[6], data[7]);
        //changed for valve 3.4
        DatabaseInsertStatement dbStatement = new DatabaseInsertStatement(
                table, config.SCAN_DATABASE, tableDefinition, tableCreation,
                insertStatement, time, data[0], data[1], data[2], data[3],
                data[4], data[5], data[6], data[7], 1, 1);

        if (!statements.offer(dbStatement)) {
            log.warn("Can not insert One Second Scan data into database due to "
                    + "a full queue.\nData will be discarded.");
        }
    }
}
